import pandas as pd

"""
Створити програму, яка виконує наступні завдання, використовуючи файл відповідно до варіанту:
1. Читає файл та змінює назви стовпців.
2. Знаходить проблеми з даними та виконує попередню обробку даних для усунення цих проблем.
"""

data = pd.read_excel(
    r'C:\Users\Nestor\Desktop\Files\3\ADPy\lab6\Version 13.xlsx')


# print(data.head)
"""
<bound method NDFrame.head of       Unnamed: 0.1  Unnamed: 0       open_SAR  open_USD       high_SAR  high_USD        low_SAR   low_USD      close_SAR  close_USD    volume
0                0  2021-01-30  128437.248512  34246.28    131012.7232  34933.00      123106.88     32825  128333.212416   34218.54   43072.0
1                1  2021-01-29  125144.022272  33368.18   144510.03776  38531.90   119695.51616   31915.4  128459.450880   34252.20  231827.0
2                2  2021-01-28  113870.357376  30362.19  126703.438592  33783.98   111919.81184   29842.1  125131.570944   33364.86   92621.0
3                3  2021-01-27  121753.023104  32464.01  122102.860416  32557.29  109668.146688  29241.72  113885.208960   30366.15   95911.0
4                4  2021-01-26  120966.114176  32254.19  123470.218752  32921.88  115652.472448  30837.37  121767.124608   32467.77   84972.0
...            ...         ...            ...       ...            ...       ...            ...       ...            ...        ...       ...
1007          1007  2018-05-11   33761.888384   9002.21    33816.60672   9016.80     31282.0864      8341   31503.360000    8400.00   48227.0
1008          1008  2018-05-10      34916.224   9310.00   35235.458048   9395.12      33641.088      8970   33761.850880    9002.20   25055.0
1009          1009  2018-05-09     34421.1712   9178.00      35216.256   9390.00      33622.336      8965   34916.224000    9310.00   25673.0
1010          1010  2018-05-08      35122.496   9365.00    35537.66528   9475.70   33980.649216   9060.54   34457.025024    9187.56   25533.0
1011          1011  2018-05-07   36232.689408   9661.02   36340.138368   9689.67     34432.4224      9181   35122.496000    9365.00   33787.0

[1012 rows x 11 columns]>
"""

# видалення дуплікатів (по даті)
data.drop_duplicates(subset=['Unnamed: 0'], keep=False, inplace=True)

# перейменування колонки дат та зміна типу на datetime64
data.rename(columns={"Unnamed: 0": "Date"}, inplace=True)
data = data.astype({"Date": "datetime64"})

# зміна індексу
data.set_index("Date", inplace=True)

# видалення непотрібної колонки
data.drop('Unnamed: 0.1', axis=1, inplace=True)


# print(data.head)
"""
<bound method NDFrame.head of                  open_SAR  open_USD       high_SAR  high_USD        low_SAR   low_USD      close_SAR  close_USD    volume
Date
2021-01-30  128437.248512  34246.28    131012.7232  34933.00      123106.88     32825  128333.212416   34218.54   43072.0
2021-01-29  125144.022272  33368.18   144510.03776  38531.90   119695.51616   31915.4  128459.450880   34252.20  231827.0
2021-01-28  113870.357376  30362.19  126703.438592  33783.98   111919.81184   29842.1  125131.570944   33364.86   92621.0
2021-01-27  121753.023104  32464.01  122102.860416  32557.29  109668.146688  29241.72  113885.208960   30366.15   95911.0
2021-01-26  120966.114176  32254.19  123470.218752  32921.88  115652.472448  30837.37  121767.124608   32467.77   84972.0
...                   ...       ...            ...       ...            ...       ...            ...        ...       ...
2018-05-11   33761.888384   9002.21    33816.60672   9016.80     31282.0864      8341   31503.360000    8400.00   48227.0
2018-05-10      34916.224   9310.00   35235.458048   9395.12      33641.088      8970   33761.850880    9002.20   25055.0
2018-05-09     34421.1712   9178.00      35216.256   9390.00      33622.336      8965   34916.224000    9310.00   25673.0
2018-05-08      35122.496   9365.00    35537.66528   9475.70   33980.649216   9060.54   34457.025024    9187.56   25533.0
2018-05-07   36232.689408   9661.02   36340.138368   9689.67     34432.4224      9181   35122.496000    9365.00   33787.0

[988 rows x 9 columns]>
"""

# сортування за індексом (датою)
data.sort_index(ascending=True, inplace=True)

# очистка від пустих значень
data.dropna(inplace=True)

"""
зачасту краще заміняти NaN на певне значення (наприклад 0, середнє, середнє сусідів),
але таке рішення не підходить для обраних даних: краще дані про ціну будуть відсутні,
ніж хибні.
також виникає проблема з object даними, які містяться у деяких колонках. якщо NaN не
прибрати, то змінити тип даних не вийде.
можливі рішення: замінити NaN на певне значення (напр. 999999999), після чого змінити
тип даних, після чого вже виправити ці значення.
"""

# print(data.info())
"""
<class 'pandas.core.frame.DataFrame'>
DatetimeIndex: 977 entries, 2018-05-07 to 2021-01-30
Data columns (total 9 columns):
 #   Column     Non-Null Count  Dtype
---  ------     --------------  -----
 0   open_SAR   977 non-null    object
 1   open_USD   977 non-null    float64
 2   high_SAR   977 non-null    object
 3   high_USD   977 non-null    float64
 4   low_SAR    977 non-null    object
 5   low_USD    977 non-null    object
 6   close_SAR  977 non-null    float64
 7   close_USD  977 non-null    float64
 8   volume     977 non-null    float64
dtypes: float64(5), object(4)
memory usage: 76.3+ KB
"""

# колонки з помилковими форматами:
# object -> float64 : open_SAR, high_SAR, low_SAR, low_USD
# float64 -> int64 : volume

# очистка від даних які мають хибні значення
have_errors = ['open_SAR', 'high_SAR', 'low_SAR', 'low_USD']
for he in have_errors:
    data = data.replace('-', '')
    data = data[data[he].str.contains(r'\d', na=True)]

# перевід з string-object у float64
data = data.assign(open_SAR=lambda x: x.open_SAR.astype('float64'))
data = data.assign(high_SAR=lambda x: x.high_SAR.astype('float64'))
data = data.assign(low_SAR=lambda x: x.low_SAR.astype('float64'))
data = data.assign(low_USD=lambda x: x.low_USD.astype('float64'))

# перевід з float64 у int64
data = data.assign(volume=lambda x: x.volume.astype('int64'))

# print(data.info())
"""
<class 'pandas.core.frame.DataFrame'>
DatetimeIndex: 973 entries, 2018-05-07 to 2021-01-30
Data columns (total 9 columns):
 #   Column     Non-Null Count  Dtype
---  ------     --------------  -----
 0   open_SAR   973 non-null    float64
 1   open_USD   973 non-null    float64
 2   high_SAR   973 non-null    float64
 3   high_USD   973 non-null    float64
 4   low_SAR    973 non-null    float64
 5   low_USD    973 non-null    float64
 6   close_SAR  973 non-null    float64
 7   close_USD  973 non-null    float64
 8   volume     973 non-null    int64
dtypes: float64(8), int64(1)
memory usage: 76.0 KB
"""


# позбавлення від від'ємних значень
data = data.abs()

# позбавлення від аномальних значень
# аномальними рахуються:
# 1.5 * найменше < попереднє
# найбільше > 1.5 * попереднє

# приклад з volume (max=402201)
# print(data.nlargest(3,data.columns[8]))
"""
                 open_SAR  open_USD       high_SAR  high_USD        low_SAR   low_USD      close_SAR  close_USD  volume
Date
2020-03-13   18001.957504   4800.01   22333.632000   5955.00   14184.500352   3782.13   20921.981440    5578.60  402201
2020-03-12   29757.848832   7934.58   29876.323968   7966.17   16539.264000   4410.00   18001.920000    4800.00  261505
2021-01-11  143077.835008  38150.02  143508.080896  38264.74  114087.168000  30420.00  132780.924288   35404.47  249131
"""


def fix_values(df):
    temp = df
    i = 0
    while i < len(temp.columns):
        s = temp.nsmallest(3, temp.columns[i])
        if 1.5*s.iloc[0, i] < s.iloc[2, i]:
            temp.drop(index=temp.nsmallest(
                1, temp.columns[i]).index, inplace=True)
        l = temp.nlargest(3, temp.columns[i])
        if l.iloc[0, i] > 1.5*l.iloc[2, i]:
            temp.drop(index=temp.nlargest(
                1, temp.columns[i]).index, inplace=True)
        i = i+1
    return temp


data = fix_values(data)

# (max=261505)
# print(data.nlargest(3,data.columns[8]))
"""
                 open_SAR  open_USD       high_SAR  high_USD       low_SAR  low_USD      close_SAR  close_USD  volume
Date
2020-03-12   29757.848832   7934.58   29876.323968   7966.17   16539.26400   4410.0   18001.920000    4800.00  261505
2021-01-11  143077.835008  38150.02  143508.080896  38264.74  114087.16800  30420.0  132780.924288   35404.47  249131
2021-01-29  125144.022272  33368.18  144510.037760  38531.90  119695.51616  31915.4  128459.450880   34252.20  231827
"""


# print(data.describe())
"""
            open_SAR      open_USD       high_SAR      high_USD        low_SAR       low_USD      close_SAR     close_USD         volume
count     972.000000    972.000000     972.000000    972.000000     972.000000    972.000000     972.000000    972.000000     972.000000
mean    34276.182009   9139.340340   35194.650030   9384.239023   33275.415048   8872.497613   34336.169349   9155.335257   52156.185185
std     20937.050633   5582.618023   21873.075799   5832.198112   19800.463856   5279.560542   21016.883926   5603.904630   33361.279926
min     12045.197184   3211.710000   12288.185600   3276.500000   11837.237504   3156.260000   12045.234688   3211.720000    5743.000000
25%     24195.471200   6451.437500   24617.953760   6564.087500   23699.724576   6319.252500   24189.179904   6449.760000   29785.750000
50%     30653.950656   8173.515000   31185.869888   8315.345000   29806.510272   7947.555000   30658.694912   8174.780000   43614.500000
75%     38108.151936  10161.090000   38896.336000  10371.250000   36982.188096   9860.865000   38123.584832  10165.205000   64071.000000
max    152217.334784  40586.960000  157329.280000  41950.000000  145215.488000  38720.000000  152201.770624  40582.810000  261505.000000
"""

# видозміна таблиці для подальшого використання
temp = data
temp['change_SAR'] = temp['open_SAR']-temp['close_SAR']
temp['change_USD'] = temp['open_USD']-temp['close_USD']

# print(data.describe())
"""
            open_SAR      open_USD       high_SAR      high_USD        low_SAR       low_USD      close_SAR     close_USD         volume    change_SAR   change_USD
count     972.000000    972.000000     972.000000    972.000000     972.000000    972.000000     972.000000    972.000000     972.000000    972.000000   972.000000
mean    34276.182009   9139.340340   35194.650030   9384.239023   33275.415048   8872.497613   34336.169349   9155.335257   52156.185185    -59.987339   -15.994918
std     20937.050633   5582.618023   21873.075799   5832.198112   19800.463856   5279.560542   21016.883926   5603.904630   33361.279926   1672.496552   445.951512
min     12045.197184   3211.710000   12288.185600   3276.500000   11837.237504   3156.260000   12045.234688   3211.720000    5743.000000 -12459.691392 -3322.230000
25%     24195.471200   6451.437500   24617.953760   6564.087500   23699.724576   6319.252500   24189.179904   6449.760000   29785.750000   -510.757600  -136.187500
50%     30653.950656   8173.515000   31185.869888   8315.345000   29806.510272   7947.555000   30658.694912   8174.780000   43614.500000    -34.447424    -9.185000
75%     38108.151936  10161.090000   38896.336000  10371.250000   36982.188096   9860.865000   38123.584832  10165.205000   64071.000000    395.601568   105.482500
max    152217.334784  40586.960000  157329.280000  41950.000000  145215.488000  38720.000000  152201.770624  40582.810000  261505.000000  17319.722240  4618.100000
"""

# print(temp.groupby(temp.index.year)['change_SAR','change_USD','volume'].mean())
"""
      change_SAR  change_USD         volume
Date
2018   88.417037   23.575362   36409.008511
2019  -35.698259   -9.518521   41999.438356
2020 -217.284381  -57.936322   69465.675287
2021  398.297168  106.201250  109826.875000
"""

# print(temp.pivot_table(columns= temp.index, values=['change_SAR', 'change_USD', 'volume']))
"""
Date          2018-05-07    2018-05-08  2018-05-09   2018-05-10    2018-05-11  2018-05-12    2018-05-13  ...   2021-01-24  2021-01-25    2021-01-26    2021-01-27    2021-01-28     2021-01-29    2021-01-30
change_SAR   1110.193408    665.470976   -495.0528   1154.37312   2258.528384    -225.024   -766.094208  ...   -682.19776     19.6896   -801.010432   7867.814144 -11261.213568   -3315.428608    104.036096     
change_USD    296.020000    177.440000   -132.0000    307.80000    602.210000     -60.000   -204.270000  ...   -181.90000      5.2500   -213.580000   2097.860000  -3002.670000    -884.020000     27.740000     
volume      33787.000000  25533.000000  25673.0000  25055.00000  48227.000000   40241.000  25632.000000  ...  57978.00000  88499.0000  84972.000000  95911.000000  92621.000000  231827.000000  43072.000000 
"""
